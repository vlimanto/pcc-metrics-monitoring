---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::010438472260:role/pcc-monitoring-QagwAMNU-prometheus-role
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: monitoring
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 40Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
       global:
         scrape_interval: 15s
         scrape_timeout: 10s
         evaluation_interval: 15s
       scrape_configs:
       # Prisma Cloud scrape configuration
       - job_name: twistlock
         scheme: https
         static_configs:
       # Replace "target" and "metrics_path" with your path to Console respectively
         - targets: ['us-west1.cloud.twistlock.com']
         metrics_path: /us-4-161055283/api/v1/metrics
       # Access/secret API key with Compute Auditor (or greater) access
         basic_auth:
           username_file: '/mnt/secrets-store/username'
           password_file: '/mnt/secrets-store/password'
       
       # Grafana monitoring 
       - job_name: grafana
         metrics_path: /metrics
         scheme: http
         static_configs:
         - targets:
           - grafana:3000
       
       # Prometheus self-monitoring
       - job_name: prometheus  
         honor_timestamps: true 
         metrics_path: /metrics
         scheme: http
         follow_redirects: true
         enable_http2: true
         static_configs:
         - targets:
           - localhost:9090
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: docker.io/prom/prometheus:latest
        imagePullPolicy: IfNotPresent
        args:
          - '--storage.tsdb.retention=6h'
          - '--storage.tsdb.path=/prometheus'
          - '--config.file=/etc/prometheus/prometheus.yml'
        command:
        - /bin/prometheus
        ports:
        - name: web
          containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        - name: data
          mountPath: /prometheus
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
      restartPolicy: Always
      securityContext:
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        # set fsGroup equal to runAsGroup
        fsGroup: 65534
      terminationGracePeriodSeconds: 30
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
      - name: data
        #emptyDir: {}
        persistentVolumeClaim:
          claimName: prometheus-pvc
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "app4-pcc-secrets"

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    app: prometheus
  type: ClusterIP
  ports:
  - name: prometheus
    protocol: TCP
    port: 9090
---
